<?php
/**
 * PostNuke Application Framework
 *
 * @copyright (c) 2002, PostNuke Development Team
 * @link http://www.postnuke.com
 * @version $Id: pnadmin.php 20578 2006-11-22 19:19:01Z rgasch $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package PostNuke_Value_Addons
 * @subpackage Polls
*/

/**
 * the main administration function
 *
 * @author Mark West
 * @return string HTML string
 */
function Polls_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = new pnRender('Polls', false);

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_admin_main.htm');
}

/**
 * add new item
 * This is a standard function that is called whenever an administrator
 * wishes to create a new module item
 * @author Mark West
 * @return string HTML string
 */
function Polls_admin_new()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = new pnRender('Polls', false);

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_admin_new.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by Polls_admin_new() to create a new item
 * @param 'name' the name of the item to be created
 * @param 'number' the number of the item to be created
 * @author Mark West
 * @return bool true
 */
function Polls_admin_create($args)
{
    $poll = FormUtil::getPassedValue('poll', isset($args['poll']) ? $args['poll'] : null, 'POST');

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Polls', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here

    // Create the poll
    $pollid = pnModAPIFunc('Polls', 'admin', 'create',
                           array('title' => $poll['title'],
                                 'language' => $poll['language'],
                                 'options' => $poll['options']));

    if ($pollid != false) {
        // Success
        LogUtil::registerStatus (_POLLSCREATED);
    }

    return pnRedirect(pnModURL('Polls', 'admin', 'view'));
}

/**
 * modify an item
 * This is a standard function that is called whenever an administrator
 * wishes to modify a current module item
 * @param 'pollid' the id of the item to be modified
 * @author Mark West
 * @return string HTML string
 */
function Polls_admin_modify($args)
{
    $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'GET');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');

    if (!empty($objectid)) {
        $pollid = $objectid;
    }

    // Get the poll
    $item = pnModAPIFunc('Polls', 'user', 'get', array('pollid' => $pollid));

    if ($item == false) {
        return DataUtil::formatForDisplayHTML(_POLLSNOSUCHITEM);
    }

    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', "$item[title]::$pollid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = new pnRender('Polls', false);

    // Assign the item
    $pnRender->assign($item);

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_admin_modify.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by Polls_admin_modify() to update a current item
 * @param 'pollid' the id of the item to be updated
 * @param 'polltitle' the name of the item to be updated
 * @param 'polllanguage' the language of the item to be updated
 * @author Mark West
 * @return bool true
 */
function Polls_admin_update($args)
{
    $poll = FormUtil::getPassedValue('poll', isset($args['poll']) ? $args['poll'] : null, 'POST');
    if (!empty($poll['objectid'])) {
        $poll['pollid'] = $poll['objectid'];
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Polls', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here

    // Update the poll
    if(pnModAPIFunc('Polls', 'admin', 'update',
                    array('pollid' => $poll['pollid'],
                          'title' => $poll['title'],
                          'language' => $poll['language'],
                          'options' => $poll['options']))) {
        // Success
        LogUtil::registerStatus (_POLLSUPDATED);
    }

    return pnRedirect(pnModURL('Polls', 'admin', 'view'));
}

/**
 * delete item
 * This is a standard function that is called whenever an administrator
 * wishes to delete a current module item.  Note that this function is
 * the equivalent of both of the modify() and update() functions above as
 * it both creates a form and processes its output.  This is fine for
 * simpler functions, but for more complex operations such as creation and
 * modification it is generally easier to separate them into separate
 * functions.  There is no requirement in the PostNuke MDG to do one or the
 * other, so either or both can be used as seen appropriate by the module
 * developer
 * @param 'pollid' the id of the item to be deleted
 * @param 'confirmation' confirmation that this item can be deleted
 * @author Mark West
 * @return mixed HTML string if no confirmation, true otherwise
 */
function Polls_admin_delete($args)
{
    $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $pollid = $objectid;
    }

    // Get the poll
    $item = pnModAPIFunc('Polls', 'user', 'get', array('pollid' => $pollid));

    if ($item == false) {
        return DataUtil::formatForDisplayHTML(_POLLSNOSUCHITEM);
    }

    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::Item', "$item[title]::$pollid", ACCESS_DELETE)) {
        return LogUtil::registerError (_MODULENOAUTH);
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet

        // Create output object
        $pnRender = new pnRender('Polls', false);

        // Add a hidden variable for the item id
        $pnRender->assign('pollid', $pollid);

        // Return the output that has been generated by this function
        return $pnRender->fetch('polls_admin_delete.htm');
    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Polls', 'admin', 'view'));
    }

    // Delete the poll
    if (pnModAPIFunc('Polls', 'admin', 'delete', array('pollid' => $pollid))) {
        // Success
        LogUtil::registerStatus (_POLLSDELETED);
    }

    return pnRedirect(pnModURL('Polls', 'admin', 'view'));
}

/**
 * view items
 * @author Mark West
 * @return string HTML string
 */
function Polls_admin_view()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');

    // Create output object
    $pnRender = new pnRender('Polls', false);

    // Get all the polls
    $items = pnModAPIFunc('Polls', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => pnModGetVar('Polls', 'itemsperpage')));

    $polls = array();
    if (!empty($items)) {
        foreach ($items as $item) {
            if (SecurityUtil::checkPermission( 'Polls::', "$item[title]::$item[pollid]", ACCESS_READ)) {
                $options = array();
                if (SecurityUtil::checkPermission( 'Polls::', "$item[title]::$item[pollid]", ACCESS_EDIT)) {
                    $options[] = array('url' => pnModURL('Polls', 'admin', 'modify', array('pollid' => $item['pollid'])),
                                       'image' => 'edit.gif',
                                       'title' => _EDIT);
                    if (SecurityUtil::checkPermission( 'Polls::', "$item[title]::$item[pollid]", ACCESS_DELETE)) {
                        $options[] = array('url' => pnModURL('Polls', 'admin', 'delete', array('pollid' => $item['pollid'])),
                                           'image' => 'edit_remove.gif',
                                           'title' => _DELETE);
                    }
                }

                $item['options'] = $options;
                $polls[] = $item;
            }
        }
    }
    $pnRender->assign('polls', $polls);

    // Assign the values for the smarty plugin to produce a pager
    $pnRender->assign('pager', array('numitems' => pnModAPIFunc('Polls', 'user', 'countitems'),
                               'itemsperpage' => pnModGetVar('Polls', 'itemsperpage')));


    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_admin_view.htm');
}

/**
 * This is a standard function to modify the configuration parameters of the
 * module
 * @author Mark West
 * @return string HTML string
 */
function Polls_admin_modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = new pnRender('Polls', false);

    // Assign the module vars
    $pnRender->assign(pnModGetVar('Polls'));

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_admin_modifyconfig.htm');
}

/**
 * This is a standard function to update the configuration parameters of the
 * module given the information passed back by the modification form
 * @author Mark West
 * @param int $itemsperpage items per page
 * @param int $scale scaling factor for results bar
 * @return string HTML string
 */
function Polls_admin_updateconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Polls', 'admin', 'view'));
    }

    // Update module variables
    $itemsperpage = FormUtil::getPassedValue('itemsperpage', 10, 'POST');
    pnModSetVar('Polls', 'itemsperpage', $itemsperpage);

    $scale = FormUtil::getPassedValue('scale', 1, 'POST');
    pnModSetVar('Polls', 'scale', $scale);

    // the module configuration has been updated successfuly
    LogUtil::registerStatus (_CONFIGUPDATED);

    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module','updateconfig','Polls', array('module' => 'Polls'));

    return pnRedirect(pnModURL('Polls', 'admin', 'view'));
}

?>