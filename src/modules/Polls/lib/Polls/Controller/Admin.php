<?php
/**
 * Copyright Zikula Foundation 2009 - Zikula Application Framework
 *
 * This work is contributed to the Zikula Foundation under one or more
 * Contributor Agreements and licensed to You under the following license:
 *
 * @license GNU/LGPLv3 (or at your option, any later version).
 * @package Zikula
 *
 * Please see the NOTICE file distributed with this source code for further
 * information regarding copyright and licensing.
 */

class Polls_Controller_Admin extends Zikula_AbstractController
{
    /**
     * Post initialize.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // In this controller we don't want caching to be enabled.
        $this->view->setCaching(false);
    }
    
    /**
     * the main administration function
     *
     * @return string HTML string
     */
    public function main()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_admin_main.tpl');
    }
    
    /**
     * view items
     *
     * @return string HTML string
     */
    public function view()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // Get parameters from whatever input we need.
        $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
        
        $property = FormUtil::getPassedValue('polls_property', isset($args['polls_property']) ? $args['polls_property'] : null, 'POST');
        $category = FormUtil::getPassedValue("polls_{$property}_category", isset($args["polls_{$property}_category"]) ? $args["polls_{$property}_category"] : null, 'POST');
        
        $clear    = FormUtil::getPassedValue('clear', false, 'POST');
        if ($clear) {
            $property = null;
            $category = null;
        }

        if ($this->getVar('enablecategorization')) {
            $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('Polls', 'poll_desc');
            $properties = array_keys($catregistry);

            // Validate and build the category filter - mateo
            if (!empty($property) && in_array($property, $properties) && !empty($category)) {
                $catFilter = array($property => $category);
            }

            // Assign a default property - mateo
            if (empty($property) || !in_array($property, $properties)) {
                $property = $properties[0];
            }

            // plan ahead for ML features
            $propArray = array();
            foreach ($properties as $prop) {
                $propArray[$prop] = $prop;
            }
        }

        // Get all the polls
        $items = ModUtil::apiFunc('Polls', 'user', 'getall',
                              array('startnum' => $startnum,
                                    'numitems' => $this->getVar('itemsperpage'),
                                    'ignoreml' => true,
                                    'category' => isset($catFilter) ? $catFilter : null,
                                    'catregistry' => isset($catregistry) ? $catregistry : null));

        if (!$items) {
            $items = array();
        }

        $polls = array();
        foreach ($items as $item) {
            $options = array();
             if (SecurityUtil::checkPermission( 'Polls::', "$item[title]::$item[pollid]", ACCESS_EDIT)) {
                $options[] = array('url' => ModUtil::url('Polls', 'admin', 'modify', array('pollid' => $item['pollid'])),
                                   'image' => 'xedit.gif',
                                   'title' => $this->__('Edit'));
                if (SecurityUtil::checkPermission( 'Polls::', "$item[title]::$item[pollid]", ACCESS_DELETE)) {
                    $options[] = array('url' => ModUtil::url('Polls', 'admin', 'delete', array('pollid' => $item['pollid'])),
                                       'image' => '14_layer_deletelayer.gif',
                                       'title' => $this->__('Delete'));
                }
            }

            // Add the calculated menu options to the item array
            $item['options'] = $options;
            $polls[] = $item;
        }

        // Assign the items to the template
        $this->view->assign('polls', $polls);

        // Assign the default language
        $this->view->assign('lang', ZLanguage::getLanguageCode());

        // Assign the categories information if enabled
        if ($this->getVar('enablecategorization')) {
            $this->view->assign('catregistry', $catregistry);
            $this->view->assign('numproperties', count($propArray));
            $this->view->assign('properties', $propArray);
            $this->view->assign('property', $property);
            $this->view->assign('category', $category);
        }

        // Assign the information required to create the pager
        $this->view->assign('pager', array('numitems'     => ModUtil::apiFunc('Polls', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                                         'itemsperpage' => $this->getVar('itemsperpage')));

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_admin_view.tpl');
    }
    
    /**
     * add new item
     *
     * @return string HTML string
     */
    public function newitem()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_ADD)) {
            return LogUtil::registerPermissionError();
        }

        if ($this->getVar('enablecategorization')) {
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories ('Polls', 'poll_desc');
            $this->view->assign('catregistry', $catregistry);
        }

        $this->view->assign('lang', ZLanguage::getLanguageCode());

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_admin_newitem.tpl');
    }
    
    /**
     * create item
     *
     * @param 'name' the name of the item to be created
     * @param 'number' the number of the item to be created
     * @return bool true
     */
    public function create($args)
    {
        $poll = FormUtil::getPassedValue('poll', isset($args['poll']) ? $args['poll'] : null, 'POST');

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Polls', 'admin', 'view'));
        }

        // Create the poll
        $pollid = ModUtil::apiFunc('Polls', 'admin', 'create', $poll);

        if ($pollid != false) {
            // Success
            LogUtil::registerStatus ($this->__('Done! Poll created.'));
        }

        return System::redirect(ModUtil::url('Polls', 'admin', 'view'));
    }
    
    /**
     * modify an item
     *
     * @param 'pollid' the id of the item to be modified
     * @return string HTML string
     */
    public function modify($args)
    {
        $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'GET');

        // Validate the essential parameters
        if (empty($pollid)) {
            return LogUtil::registerArgsError();
        }

        // Get the poll
        $item = ModUtil::apiFunc('Polls', 'user', 'get', array('pollid' => $pollid));

        if ($item == false) {
            return LogUtil::registerError($this->__('Error! No such poll found.'), 404);
        }

        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::', "$item[title]::$pollid", ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // load the categories system
        if ($this->getVar('enablecategorization')) {
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories ('Polls', 'poll_desc');
            $this->view->assign('catregistry', $catregistry);
        }

        // Assign the item
        $this->view->assign('item', $item);
    
        // Return the output that has been generated by this function
        return $this->view->fetch('polls_admin_modify.tpl');
    }
    
    /**
     * update item
     *
     * @param 'pollid' the id of the item to be updated
     * @param 'polltitle' the name of the item to be updated
     * @param 'polllanguage' the language of the item to be updated
     * @return bool true
     */
    public function update($args)
    {
        $poll = FormUtil::getPassedValue('poll', isset($args['poll']) ? $args['poll'] : null, 'POST');

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError (ModUtil::url('Polls', 'admin', 'view'));
        }

        // Update the poll
        if (ModUtil::apiFunc('Polls', 'admin', 'update', $poll)) {
            // Success
            LogUtil::registerStatus ($this->__('Done! Poll updated.'));
        }

        return System::redirect(ModUtil::url('Polls', 'admin', 'view'));
    }
    
    /**
     * delete item
     *
     * @param 'pollid' the id of the item to be deleted
     * @param 'confirmation' confirmation that this item can be deleted
     * @return mixed HTML string if no confirmation, true otherwise
     */
    public function delete($args)
    {
        $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'REQUEST');
     
        $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
     
        // Get the poll
        $item = ModUtil::apiFunc('Polls', 'user', 'get', array('pollid' => $pollid));

        if ($item == false) {
            return LogUtil::registerError ($this->__('Error! No such poll found.'), 404);
        }

        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::Item', "$item[title]::$pollid", ACCESS_DELETE)) {
            return LogUtil::registerPermissionError();
        }

        // Check for confirmation.
        if (empty($confirmation)) {
            // No confirmation yet
            
            // Add a hidden variable for the item id
            $this->view->assign('pollid', $pollid);

            // Return the output that has been generated by this function
            return $this->view->fetch('polls_admin_delete.tpl');
        }

        // If we get here it means that the user has confirmed the action

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Polls', 'admin', 'view'));
        }

        // Delete the poll
        if (ModUtil::apiFunc('Polls', 'admin', 'delete', array('pollid' => $pollid))) {
            // Success
            LogUtil::registerStatus ($this->__('Done! Poll deleted.'));
        }

        return System::redirect(ModUtil::url('Polls', 'admin', 'view'));
    }
    
    
    /**
     * modify module configuration
     *
     * @return string HTML string
     */
    public function modifyconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }
        
        $recurrences = array(
            -1 => $this->__('I don\'t care. Let user vote whenever he feels like'),
            0  => $this->__('Only one vote. No recurrence'),
            1  => $this->__('Once per day'),
            7  => $this->__('Once per week'),
            31 => $this->__('Once per month')
        );
        $this->view->assign('recurrences', $recurrences);

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_admin_modifyconfig.tpl');
    }
    
    /**
     * update module configuration
     *
     * @param int $itemsperpage items per page
     * @param int $scale scaling factor for results bar
     * @return string HTML string
     */
    public function updateconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Confirm authorisation code
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUti::apiFunc('Polls', 'admin', 'view'));
        }

        // Update module variables
        $itemsperpage = FormUtil::getPassedValue('itemsperpage', 10, 'POST');
        $scale = FormUtil::getPassedValue('scale', 1, 'POST');
        $recurrence = (int)FormUtil::getPassedValue('recurrence', 0, 'POST');
        $sortorder = FormUtil::getPassedValue('sortorder', 0, 'POST');
        $enablecategorization = (bool)FormUtil::getPassedValue('enablecategorization', false, 'POST');
        $addcategorytitletopermalink = (bool)FormUtil::getPassedValue('addcategorytitletopermalink', false, 'POST');
        
        $vars = array(
            'itemsperpage' => $itemsperpage,
            'scale' => $scale,
            'recurrence' => $recurrence,
            'sortorder' => $sortorder,
            'enablecategorization' => $enablecategorization,
            'addcategorytitletopermalink' => $addcategorytitletopermalink
        );
        $this->setVars($vars);

        // the module configuration has been updated successfuly
        LogUtil::registerStatus($this->__('Done! Module configuration updated.'));

        return System::redirect(ModUtil::url('Polls', 'admin', 'view'));
    }
}

