<?php
/**
 * Copyright Zikula Foundation 2009 - Zikula Application Framework
 *
 * This work is contributed to the Zikula Foundation under one or more
 * Contributor Agreements and licensed to You under the following license:
 *
 * @license GNU/LGPLv3 (or at your option, any later version).
 * @package Zikula
 *
 * Please see the NOTICE file distributed with this source code for further
 * information regarding copyright and licensing.
 */

class Polls_Controller_User extends Zikula_Controller
{
    /**
     * the main user function
     *
     * @return string HTML string
     */
    public function main()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Polls::', '::', ACCESS_READ)) {
            return LogUtil::registerPermissionError();
        }

        // load the categories system
        if ($this->getVar('enablecategorization')) {
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Polls', 'poll_desc');
            $categories = array();
            $ak = array_keys($catregistry);
            foreach ($ak as $k) {
                $categories[$k] = CategoryUtil::getCategoryByID($catregistry[$k]);
                $categories[$k]['path'] .= '/';
                $categories[$k]['subcategories'] = CategoryUtil::getCategoriesByParentID($catregistry[$k]);
            }
            $this->view->assign('categories', $categories);
        }

        $this->view->assign('lang', ZLanguage::getLanguageCode());
        $this->view->assign('shorturls', System::getVar('shorturls'));

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_user_main.tpl');
    }
    
    /**
     * view items
     * This is a standard function to provide an overview of all of the items
     * available from the module.
     * @return string HTML string
     */
    public function view()
    {
        // Security check
        if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_OVERVIEW)) {
            return LogUtil::registerPermissionError();
        }

        $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
        $cat      = (string)FormUtil::getPassedValue('cat', isset($args['cat']) ? $args['cat'] : null, 'GET');
        $prop     = (string)FormUtil::getPassedValue('prop', isset($args['prop']) ? $args['prop'] : null, 'GET');
        $func     = (string)FormUtil::getPassedValue('func');

        // defaults and input validation
        if (!is_numeric($startnum) || $startnum < 0) {
            $startnum = 1;
        }

        // load the categories system
        if ($this->getVar('enablecategorization') && !empty($prop) && !empty($cat)) {
            // get the categories registered for the Pages
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Polls', 'poll_desc');
            $properties  = array_keys($catregistry);

            // if the property and the category are specified
            // means that we'll list the Polls that belongs to that category
            if (in_array($prop, $properties)) {
                if (!is_numeric($cat)) {
                    $rootCat = CategoryUtil::getCategoryByID($catregistry[$prop]);
                    $cat = CategoryUtil::getCategoryByPath($rootCat['path'].'/'.$cat);
                } else {
                    $cat = CategoryUtil::getCategoryByID($cat);
                }
                if (!empty($cat) && isset($cat['path'])) {
                    // include all it's subcategories and build the filter
                    $categories = categoryUtil::getCategoriesByPath($cat['path'], '', 'path');
                    $catstofilter = array();
                    foreach ($categories as $category) {
                        $catstofilter[] = $category['id'];
                    }
                    $catFilter = array($prop => $catstofilter);
                } else {
                    LogUtil::registerError($this->__('Error! Invalid category.'));
                }
            }
        }

        // Get all the polls
        $items = array();
        $items = ModUtil::apiFunc('Polls', 'user', 'getall',
                              array('startnum' => $startnum,
                                    'numitems' => $this->getVar('itemsperpage'),
                                    'category' => isset($catFilter) ? $catFilter : null,
                                    'catregistry' => isset($catregistry) ? $catregistry : null));

        // assign various useful template variables
        $this->view->assign('startnum', $startnum);
        $this->view->assign('category', $cat);
        $this->view->assign('property', $prop);
        $this->view->assign('lang', ZLanguage::getLanguageCode());
        $this->view->assign('shorturls', System::getVar('shorturls'));
        
        // Loop through each item and display it
        $polls = array();
        foreach ($items as $item) {
            if (SecurityUtil::checkPermission('Polls::', "$item[title]::$item[pollid]", ACCESS_READ)) {
                $item['votecount'] = ModUtil::apiFunc('Polls', 'user', 'countvotes', array('pollid' => $item['pollid']));
                $this->view->assign('poll', $item);
                // can user vote?
                if (SecurityUtil::checkPermission('Polls::', "$item[title]::", ACCESS_COMMENT)) {
                    $this->view->assign('usercanvote', true);
                } else {
                    $this->view->assign('usercanvote', false);
                }
                $allowedtovote = (bool)ModUtil::apiFunc('Polls', 'user', 'allowedtovote', array('pollid' => $item['pollid']));
                $this->view->assign('allowedtovote', $allowedtovote);
                $polls[] = $this->view->fetch('polls_user_row.tpl', $item['pollid']);
            }
        }

        // Display the entries
        $this->view->assign('polls', $polls);
        $this->view->assign('func', $func);

        // Assign the values for the smarty plugin to produce a pager
        $this->view->assign('pager', array('numitems' => ModUtil::apiFunc('Polls', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                                         'itemsperpage' => $this->getVar('itemsperpage')));

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_user_view.tpl');
    }
    
    /**
     * display item
     * This is a standard function to provide detailed informtion on a single item
     * available from the module.
     * @return string HTML string
     */
    public function display($args)
    {
        $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'GET');
        $title = FormUtil::getPassedValue('title', isset($args['title']) ? $args['title'] : null, 'GET');

        // Get the poll
        if (isset($pollid) && is_numeric($pollid)) {
            $item = ModUtil::apiFunc('Polls', 'user', 'get', array('pollid' => $pollid, 'parse' => true));
        } else {
            $item = ModUtil::apiFunc('Polls', 'user', 'get', array('title' => $title, 'parse' => true));
            System::queryStringSetVar('pollid', $item['pollid']);
        }

        if ($item == false) {
            return LogUtil::registerError ($this->__('No such poll found.'), 404);
        }

        // Check the user has already voted in this poll
        $allowedtovote = (bool)ModUtil::apiFunc('Polls', 'user', 'allowedtovote', array('pollid' => $item['pollid']));
        if (!$allowedtovote) {
            return ModUtil::func('Polls', 'user', 'results', $args);
        }

        // assign the poll
        $this->view->assign('item', $item);
        
        // can user vote?
        if (SecurityUtil::checkPermission('Polls::', "$item[title]::", ACCESS_COMMENT)) {
            $this->view->assign('usercanvote', true);
        } else {
            $this->view->assign('usercanvote', false);
        }

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_user_display.tpl');
    }
    
    /**
     * display results
     * Display the results of a poll
     * @return string HTML string
     */
    public function results($args)
    {
        $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'GET');
        $title = FormUtil::getPassedValue('title', isset($args['title']) ? $args['title'] : null, 'GET');
        
        // Get the poll
        if (isset($pollid) && is_numeric($pollid)) {
            $item = ModUtil::apiFunc('Polls', 'user', 'get', array('pollid' => $pollid, 'parse' => true));
        } else {
            $item = ModUtil::apiFunc('Polls', 'user', 'get', array('title' => $title, 'parse' => true));
            System::queryStringSetVar('pollid', $item['pollid']);
        }

        if ($item == false) {
            return LogUtil::registerError ($this->__('No such poll found.'), 404);
        }

        // assign the item
        $this->view->assign('item', $item);
        $this->view->assign('votecount', ModUtil::apiFunc('Polls', 'user', 'countvotes', array('pollid' => $item['pollid'])));
        
        // is user allowed to vote?
        $allowedtovote = (bool)ModUtil::apiFunc('Polls', 'user', 'allowedtovote', array('pollid' => $item['pollid']));
        $this->view->assign('allowedtovote', $allowedtovote);
        
        // can user vote?
        if (SecurityUtil::checkPermission('Polls::', '::', ACCESS_COMMENT)) {
            $this->view->assign('usercanvote', true);
        } else {
            $this->view->assign('usercanvote', false);
        }

        // Return the output that has been generated by this function
        return $this->view->fetch('polls_user_results.tpl');
    }
    
    /**
     * Process vote form
     * Takes the results of the users vote form and calls API function to add vote
     * if vote is allowed
     * @return string HTML string
     */
    public function vote($args)
    {
        $pollid = FormUtil::getPassedValue('pollid', null, 'POST');
        $title = FormUtil::getPassedValue('title', null, 'POST');
        $displayresults = FormUtil::getPassedValue('displayresults', null, 'POST');
        $voteid = FormUtil::getPassedValue('voteid', null, 'POST');
        $returnurl = FormUtil::getPassedValue('returnurl', null, 'POST');

        // Argument check
        if (!isset($title) ||
            !isset($pollid)) {
            LogUtil::registerArgsError();
            return System::redirect(ModUtil::url('Polls', 'user', 'view'));
        }

        // Security check
        if (!SecurityUtil::checkPermission('Polls::', "$title::", ACCESS_COMMENT)) {
            return LogUtil::registerPermissionError();
        }

        $allowedtovote = (bool)ModUtil::apiFunc('Polls', 'user', 'allowedtovote', array('pollid' => $pollid));
        if (!$allowedtovote) {
            LogUtil::registerError($this->__('You have already voted!'));
        } else {
            $result = ModUtil::apiFunc('Polls', 'user', 'vote',
                                   array('pollid' => $pollid,
                                         'title' => $title,
                                         'voteid' => $voteid));
        }

        if ($displayresults == 0 && isset($returnurl)) {
            return System::redirect($returnurl);
        } else {
            return ModUtil::func('Polls', 'user', 'results', array('pollid' => $pollid));
        }
    }
}

