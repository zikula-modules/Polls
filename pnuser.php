<?php
/**
 * PostNuke Application Framework
 *
 * @copyright (c) 2002, PostNuke Development Team
 * @link http://www.postnuke.com
 * @version $Id: pnuser.php 20571 2006-11-22 18:25:29Z rgasch $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package PostNuke_Value_Addons
 * @subpackage Polls
*/

/**
 * the main user function
 *
 * @author Mark West
 * @return string HTML string
 */
function Polls_user_main()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_READ)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = pnRender::getInstance('Polls');

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_user_main.htm');
}

/**
 * view items
 * This is a standard function to provide an overview of all of the items
 * available from the module.
 * @author Mark West
 * @return string HTML string
 */
function Polls_user_view()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', '::', ACCESS_OVERVIEW)) {
        return LogUtil::registerPermissionError();
    }

    $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');

    // Create output object
    $pnRender = pnRender::getInstance('Polls');

    // Get all the polls
    $items = pnModAPIFunc('Polls', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => pnModGetVar('Polls', 'itemsperpage')));

    if ($items == false) {
        return DataUtil::formatForDisplayHTML(_POLLSITEMFAILED);
    }

    // Loop through each item and display it
    $polls = array();
    foreach ($items as $item) {
        if (SecurityUtil::checkPermission('Polls::', "$item[title]::$item[pollid]", ACCESS_READ)) {
            $polls[] = array('url' => pnModURL('Polls', 'user', 'display', array('pollid' => $item['pollid'])),
                             'title' => $item['title'],
                             'results' => pnModURL('Polls', 'user', 'results', array('pollid' => $item['pollid'])),
                             'votecount' => pnModAPIFunc('Polls', 'user', 'countvotes', array('pollid' => $item['pollid'])));
        }
    }
    $pnRender->assign('polls', $polls);

    // Assign the values for the smarty plugin to produce a pager
    $pnRender->assign('pager', array('numitems' => pnModAPIFunc('Polls', 'user', 'countitems'),
                               'itemsperpage' => pnModGetVar('Polls', 'itemsperpage')));

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_user_view.htm');
}

/**
 * display item
 * This is a standard function to provide detailed informtion on a single item
 * available from the module.
 * @author Mark West
 * @return string HTML string
 */
function Polls_user_display($args)
{
    $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'GET');
    $title = FormUtil::getPassedValue('title', isset($args['title']) ? $args['title'] : null, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');
    if (!empty($objectid)) {
        $pollid = $objectid;
    }

    // Check the user has already voted in this poll
    if (pnSessionGetVar("poll_voted$pollid")) {
       LogUtil::registerStatus (_POLLSYOUVOTEDALREADY);
       return pnRedirect(pnModURL('Polls', 'user', 'results', array('pollid' => $pollid)));
    }

    // Create output object
    $pnRender = pnRender::getInstance('Polls');

    // Get the poll
    if (isset($pollid) && is_numeric($pollid)) {
        $item = pnModAPIFunc('Polls', 'user', 'get', array('pollid' => $pollid, 'parse' => true));
    } else {
        $item = pnModAPIFunc('Polls', 'user', 'get', array('title' => $title, 'parse' => true));
        pnQueryStringSetVar('pollid', $item['pollid']);
    }

    if ($item == false) {
        return LogUtil::registerError (_NOSUCHITEM, 404);
    }

    // assign the poll
    $pnRender->assign($item);

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_user_display.htm');
}

/**
 * display results
 * Display the results of a poll
 * @author Mark West
 * @return string HTML string
 */
function Polls_user_results($args)
{
    $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'GET');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');
    if (!empty($objectid)) {
        $pollid = $objectid;
    }

    // Create output object
    $pnRender = pnRender::getInstance('Polls');

    // Get the poll
    $item = pnModAPIFunc('Polls', 'user', 'get', array('pollid' => $pollid));

    if ($item == false) {
        return LogUtil::registerError (_NOSUCHITEM, 404);
    }

    // assign the item
    $pnRender->assign($item);
    $pnRender->assign('votecount', pnModAPIFunc('Polls', 'user', 'countvotes', array('pollid' => $item['pollid'])));

    // Return the output that has been generated by this function
    return $pnRender->fetch('polls_user_results.htm');
}

/**
 * Process vote form
 * Takes the results of the users vote form and calls API function to add vote
 * if vote is allowed
 * @author Mark West
 * @return string HTML string
 */
function Polls_user_vote($args)
{
    $pollid = FormUtil::getPassedValue('pollid', null, 'POST');
    $title = FormUtil::getPassedValue('title', null, 'POST');
    $displayresults = FormUtil::getPassedValue('displayresults', null, 'POST');
    $voteid = FormUtil::getPassedValue('voteid', null, 'POST');

    // Argument check
    if (!isset($title) ||
        !isset($pollid)) {
        LogUtil::registerError (_MODARGSERROR);
        return pnRedirect(pnModURL('Polls', 'user', 'view'));
    }

    // Security check
    if (!SecurityUtil::checkPermission( 'Polls::', "$title::", ACCESS_COMMENT)) {
        return LogUtil::registerPermissionError();
    }

    if (pnSessionGetVar("poll_voted$pollid")) {
        LogUtil::registerError (_POLLSYOUVOTEDALREADY);
    } else {
        $result = pnModAPIFunc('Polls', 'user', 'vote',
                               array('pollid' => $pollid,
                                     'title' => $title,
                                     'voteid' => $voteid));
    }

    if ($displayresults == 0 && isset($returnurl)) {
        return pnRedirect($returnurl);
    } else {
        return pnRedirect(pnModURL('Polls', 'user', 'results', array('pollid' => $pollid)));
    }
}
